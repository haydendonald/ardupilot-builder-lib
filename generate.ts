const path = require('path');
import fs from 'fs';
import { Process, ProcessEvent } from './process';
import { Target, targets } from './types/target';

/**
 * Generate this projects configurations from the ArduPilot project
 */

const repo = "https://github.com/ArduPilot/ardupilot.git";
const branch = "master";
const repoLocation = path.join(__dirname, 'ardupilot');
const boardsFilePath = path.join(__dirname, 'boards.ts');

async function deleteRepo() {
    await fs.promises.rm(repoLocation, { recursive: true, force: true });
}

async function downloadRepo() {
    //If the repo exists delete it
    if (fs.existsSync(repoLocation)) {
        await deleteRepo();
    }

    await new Promise<void>(async (resolve) => {
        console.log(`Downloading repo from ${repo} ${branch} to ${repoLocation}`);
        let process = new Process("bash");
        process.on(ProcessEvent.data, (data: any) => { console.log(data.toString()); });
        process.on(ProcessEvent.error, (error: any) => { console.log(error.toString()); });
        process.on(ProcessEvent.close, (code: any) => { resolve(); });
        await process?.executeWait(`git clone -b ${branch} ${repo} ${repoLocation}`, true);
        console.log(`Repo ${repo} ${branch} finished downloading to ${repoLocation}`);
    });
}

async function getBoards(targets: Target[]): Promise<string[]> {
    console.log("Getting boards");
    const result = await new Promise<string[]>(async (resolve) => {
        let boards: string[] = [];
        let process = new Process("bash");
        process.on(ProcessEvent.data, (data: any) => {
            const string: string = data.toString();
            if (string.includes("[") && string.includes("]\n")) {
                for (const board of JSON.parse(string.substring(0, string.indexOf("\n")).replace(/'/g, "\""))) {
                    if (!boards.includes(board)) {
                        boards.push(board);
                    }
                }
            }
        });
        process.on(ProcessEvent.error, (error: any) => { console.log(error.toString()); });
        process.on(ProcessEvent.close, (code: any) => { resolve(boards); });
        for (const target of targets) {
            await process?.executeWait(`python ${repoLocation}/Tools/scripts/board_list.py ${target}`, false);
        }
        await process?.exit();
    });
    console.log("Found " + result.length + " boards");
    return result;
}

async function writeBoardsTSFile(boards: string[]) {
    if (fs.existsSync(boardsFilePath)) {
        await fs.promises.unlink(boardsFilePath);
    }
    
    const fileContent = `
    //This file is generated by generate.ts
    import { Board } from "./board";
    import { BuildLocation } from "./buildLocation";
    export class Boards {
        ${boards.map(board => {
        return `static ${board.replace(/\+/g, 'Plus').replace(/^[0-9]/, '').replace(/[^a-zA-Z0-9_]/g, '')}: Board = {
            friendlyName: "${board}",
            board: "${board}",
            hwDefDirectory: \`\${BuildLocation.buildFolder}/libraries/AP_HAL_ChibiOS/hwdef/${board}\`
        };`
    }).join("\n")}
    }`;
    await fs.promises.writeFile(boardsFilePath, fileContent, 'utf8');
}

async function main() {
    console.log("Start generation");
    await downloadRepo();
    const boards: string[] = await getBoards(targets);
    await writeBoardsTSFile(boards);
    await deleteRepo();
    console.log("Finished generation");
}
main();
